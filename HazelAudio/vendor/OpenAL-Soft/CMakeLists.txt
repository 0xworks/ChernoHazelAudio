cmake_minimum_required (VERSION 3.10)

project ("OpenAL-Soft" VERSION 0.1 DESCRIPTION "OpenAL-Soft library for use in HazelAudio")

add_library(
	${PROJECT_NAME} STATIC
	"include/AL/al.h"
	"include/AL/alc.h"
	"include/AL/alext.h"
	"include/AL/efx.h"
	"include/AL/efx-creative.h"
	"include/AL/efx-presets.h"
	"include/config.h"
	"include/hrtf_default.h"
	"include/version.h"
	"src/al/auxeffectslot.cpp"
	"src/al/auxeffectslot.h"
	"src/al/buffer.cpp"
	"src/al/buffer.h"
	"src/al/effect.cpp"
	"src/al/effect.h"
	"src/al/error.cpp"
	"src/al/event.cpp"
	"src/al/event.h"
	"src/al/extension.cpp"
	"src/al/filter.cpp"
	"src/al/filter.h"
	"src/al/listener.cpp"
	"src/al/listener.h"
	"src/al/source.cpp"
	"src/al/source.h"
	"src/al/state.cpp"
	"src/alc/backends/base.cpp"
	"src/alc/backends/base.h"
	"src/alc/backends/dsound.cpp"
	"src/alc/backends/dsound.h"
	"src/alc/backends/loopback.cpp"
	"src/alc/backends/loopback.h"
	"src/alc/backends/null.cpp"
	"src/alc/backends/null.h"
	"src/alc/backends/wasapi.cpp"
	"src/alc/backends/wasapi.h"
	"src/alc/backends/wave.cpp"
	"src/alc/backends/wave.h"
	"src/alc/backends/winmm.cpp"
	"src/alc/backends/winmm.h"
	"src/alc/effects/autowah.cpp"
	"src/alc/effects/base.h"
	"src/alc/effects/chorus.cpp"
	"src/alc/effects/compressor.cpp"
	"src/alc/effects/dedicated.cpp"
	"src/alc/effects/distortion.cpp"
	"src/alc/effects/echo.cpp"
	"src/alc/effects/equalizer.cpp"
	"src/alc/effects/fshifter.cpp"
	"src/alc/effects/modulator.cpp"
	"src/alc/effects/null.cpp"
	"src/alc/effects/pshifter.cpp"
	"src/alc/effects/reverb.cpp"
	"src/alc/effects/vmorpher.cpp"
	"src/alc/filters/biquad.cpp"
	"src/alc/filters/biquad.h"
	"src/alc/filters/nfc.cpp"
	"src/alc/filters/nfc.h"
	"src/alc/filters/splitter.cpp"
	"src/alc/filters/splitter.h"
	"src/alc/mixer/defs.h"
	"src/alc/mixer/hrtfbase.h"
	"src/alc/mixer/mixer_c.cpp"
#	"src/alc/mixer/mixer_neon.cpp"
	"src/alc/mixer/mixer_sse.cpp"
	"src/alc/mixer/mixer_sse2.cpp"
	"src/alc/mixer/mixer_sse3.cpp"
	"src/alc/mixer/mixer_sse41.cpp"
	"src/alc/alc.cpp"
	"src/alc/alcmain.h"
	"src/alc/alconfig.cpp"
	"src/alc/alconfig.h"
	"src/alc/alcontext.h"
	"src/alc/alu.cpp"
	"src/alc/alu.h"
	"src/alc/ambdec.cpp"
	"src/alc/ambdec.h"
	"src/alc/ambidefs.h"
	"src/alc/bformatdec.cpp"
	"src/alc/bformatdec.h"
	"src/alc/bs2b.cpp"
	"src/alc/bs2b.h"
	"src/alc/compat.h"
	"src/alc/converter.cpp"
	"src/alc/converter.h"
	"src/alc/cpu_caps.cpp"
	"src/alc/cpu_caps.h"
	"src/alc/devformat.h"
	"src/alc/fpu_ctrl.cpp"
	"src/alc/fpu_ctrl.h"
	"src/alc/front_stablizer.h"
	"src/alc/helpers.cpp"
	"src/alc/hrtf.cpp"
	"src/alc/hrtf.h"
	"src/alc/inprogext.h"
	"src/alc/logging.h"
	"src/alc/mastering.cpp"
	"src/alc/mastering.h"
	"src/alc/panning.cpp"
	"src/alc/ringbuffer.cpp"
	"src/alc/ringbuffer.h"
	"src/alc/uhjfilter.cpp"
	"src/alc/uhjfilter.h"
	"src/alc/uiddefs.cpp"
	"src/alc/voice.cpp"
	"src/alc/voice.h"
	"src/common/albyte.h"
	"src/common/alcomplex.cpp"
	"src/common/alcomplex.h"
	"src/common/alexcpt.cpp"
	"src/common/alexcpt.h"
	"src/common/alfstream.cpp"
	"src/common/alfstream.h"
	"src/common/almalloc.cpp"
	"src/common/almalloc.h"
	"src/common/alnumeric.h"
	"src/common/aloptional.h"
	"src/common/alspan.h"
	"src/common/alstring.cpp"
	"src/common/alstring.h"
	"src/common/atomic.h"
	"src/common/bsinc_defs.h"
	"src/common/bsinc_tables.cpp"
	"src/common/bsinc_tables.h"
	"src/common/dynload.cpp"
	"src/common/dynload.h"
	"src/common/endiantest.h"
	"src/common/intrusive_ptr.h"
	"src/common/math_defs.h"
	"src/common/opthelpers.h"
	"src/common/polyphase_resampler.cpp"
	"src/common/polyphase_resampler.h"
	"src/common/pragmadefs.h"
	"src/common/strutils.cpp"
	"src/common/strutils.h"
	"src/common/threads.cpp"
	"src/common/threads.h"
	"src/common/vecmat.h"
	"src/common/vector.h"
	"src/common/win_main_utf8.h"
)

target_compile_definitions(
	${PROJECT_NAME} PRIVATE
	"AL_LIBTYPE_STATIC"
	"AL_BUILD_LIBRARY"
	"AL_ALEXT_PROTOTYPES"
	"OpenAL_EXPORTS"
)

if(WIN32)
	target_compile_definitions(
		${PROJECT_NAME} PRIVATE
		"WIN32"
		"_WINDOWS"
		"_WIN32"
		"_WIN32_WINNT=0x0502"
		"_CRT_SECURE_NO_WARNINGS"
		"NOMINMAX"
	)
endif()

target_include_directories(
	${PROJECT_NAME} PUBLIC
	"src"
	"src/alc"
	"src/common"
	"include"
	"include/AL"
)

target_link_libraries(
	${PROJECT_NAME} PUBLIC
	"winmm"
)
